"""
–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∫–ª–∏–µ–Ω—Ç—É.
"""
from datetime import datetime, timezone, timedelta, time as dtime
from zoneinfo import ZoneInfo
import logging, httpx
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

import telegram, config
from auth import get_valid_access_token
from db import get_pool

log = logging.getLogger("AvitoNotify.reminders")
_scheduler: AsyncIOScheduler | None = None  # –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ


async def _last_message_status(avito_user_id: int, avito_chat_id: int | str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'buyer' | 'seller' | 'unknown', –ø—Ä–æ–≤–µ—Ä—è—è
    –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ Avito.

    'buyer'  ‚Äì –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞,
    'seller' ‚Äì –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞,
    'unknown' ‚Äì –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API).
    """
    chat_id = str(avito_chat_id)
    token = await get_valid_access_token(avito_user_id)
    url = f"{config.AVITO_API_BASE}/messenger/v2/accounts/{avito_user_id}/chats/{chat_id}"

    try:
        async with httpx.AsyncClient(timeout=5) as client:
            r = await client.get(url, headers={"Authorization": f"Bearer {token}"})
    except Exception as exc:
        log.warning("Net-error on chat %s: %s", avito_chat_id, exc)
        return "unknown"

    if r.status_code != 200:
        log.warning("Avito %s on chat %s: %s", r.status_code, avito_chat_id, r.text[:120])
        return "unknown"

    data = r.json()
    last = data.get("last_message")
    if not last:
        return "unknown"

    return "buyer" if last.get("direction") == "in" else "seller"


async def remind_loop() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:
    - –ø–æ–ª—É—á–∞–µ—Ç –∏–∑ –ë–î –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è;
    - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ;
    - —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    """
    now = datetime.now(timezone.utc)
    sql_due = """
        SELECT r.account_id, a.avito_user_id, a.name, r.avito_chat_id, r.first_ts, r.last_reminder
        FROM   reminders r
        JOIN   accounts  a ON a.id = r.account_id
        WHERE  (r.last_reminder IS NULL OR $1 - r.last_reminder >= $2)
    """
    async with (await get_pool()).acquire() as conn:
        rows = await conn.fetch(sql_due, now, timedelta(minutes=config.REMIND_AFTER_MIN))

    for row in rows:
        status = await _last_message_status(row["avito_user_id"], row["avito_chat_id"])
        pool = await get_pool()

        if status == "buyer":
            minutes = int((now - row["first_ts"]).total_seconds() // 60)
            sent = await _notify_linked_chats_in_hours(
                row["account_id"],
                f"‚è∞ –£–∂–µ {minutes} –º–∏–Ω –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç–µ #{row['avito_chat_id']}",
                now
            )
            if sent:
                async with pool.acquire() as conn:
                    await conn.execute(
                        "UPDATE reminders SET last_reminder = $1 WHERE account_id=$2 AND avito_chat_id=$3",
                        now, row["account_id"], row["avito_chat_id"],
                    )


        elif status == "unknown":
            account_label = row["name"] or row["avito_user_id"]
            await telegram.send_telegram(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Ç—É #{row['avito_chat_id']} "
                f"(–∞–∫–∫–∞—É–Ω—Ç {account_label}, {row['avito_user_id']}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é."
            )
            async with pool.acquire() as conn:
                await conn.execute(
                    "UPDATE reminders SET last_reminder = $1 WHERE account_id=$2 AND avito_chat_id=$3",
                    now,
                    row["account_id"],
                    row["avito_chat_id"],
                )

        elif status == "seller":
            # –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–≤–µ—Ç–∏–ª ‚Äì —É–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å—å
            async with pool.acquire() as conn:
                await conn.execute(
                    "DELETE FROM reminders WHERE account_id=$1 AND avito_chat_id=$2",
                    row["account_id"],
                    row["avito_chat_id"],
                )


async def _notify_linked_chats(account_id: int, text: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ –≤—Å–µ TG-—á–∞—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É (muted=FALSE).
    """
    pool = await get_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT tg_chat_id
            FROM v_account_chat_targets
            WHERE account_id = $1 AND muted = FALSE
        """, account_id)
    for r in rows:
        await telegram.send_telegram_to(text, r["tg_chat_id"])


def install(app) -> None:
    """
    –í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª FastAPI:
    - –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç APScheduler;
    - –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç.
    """
    @app.on_event("startup")
    async def _start_scheduler():
        global _scheduler
        if _scheduler and _scheduler.running:
            return
        _scheduler = AsyncIOScheduler(timezone="UTC")
        _scheduler.start()

        # –¶–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        _scheduler.add_job(
            remind_loop,
            trigger=IntervalTrigger(minutes=config.REMIND_AFTER_MIN),
            id="remind_loop",            # —Ñ–∏–∫—Å–∏—Ä—É–µ–º ID
            replace_existing=True,       # –Ω–µ –ø–ª–æ–¥–∏—Ç—å –¥—É–±–ª–∏
            coalesce=True,               # —Å–∂–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏
            max_instances=1,             # –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            misfire_grace_time=60,
        )

        # –£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
        _scheduler.add_job(
            morning_digest_tick,
            trigger=IntervalTrigger(minutes=1),
            id="morning_digest",
            replace_existing=True,
            coalesce=True,
            max_instances=1,
        )

        log.info("Scheduler started (interval %s min)", config.REMIND_AFTER_MIN)

    @app.on_event("shutdown")
    async def _stop_scheduler():
        if _scheduler and _scheduler.running:
            _scheduler.shutdown(wait=False)
            log.info("Scheduler stopped")


#-----------------------–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏-------------------------
async def _iter_links(account_id: int) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö —Å–≤—è–∑–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —á–∞—Ç–∞–º–∏:
    tg_chat_id, muted, work_from, work_to, tz, daily_digest_time.
    """
    async with (await get_pool()).acquire() as conn:
        rows = await conn.fetch("""
            SELECT ch.tg_chat_id, l.muted, l.work_from, l.work_to, l.tz
            FROM notify.account_chat_links l
            JOIN notify.telegram_chats ch ON ch.id = l.chat_id
            WHERE l.account_id = $1
        """, account_id)
    return [dict(r) for r in rows]


def _within_hours(now_utc: datetime, start: dtime|None, end: dtime|None, tz: str|None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –æ–∫–Ω–æ [start, end),
    –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–∫–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å.
    """
    if not start or not end:
        return True
    local = now_utc.astimezone(ZoneInfo(tz or "UTC")).timetz().replace(tzinfo=None)
    if start <= end:
        return start <= local < end
    return local >= start or local < end  # –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å


async def _notify_linked_chats_in_hours(account_id: int, text: str, now_utc: datetime) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–µ —á–∞—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞, –≥–¥–µ —Å–µ–π—á–∞—Å ¬´—Ä–∞–±–æ—á–µ–µ¬ª –≤—Ä–µ–º—è.
    """
    sent = 0
    for link in await _iter_links(account_id):
        if link["muted"]:
            continue
        if _within_hours(now_utc, link["work_from"], link["work_to"], link["tz"]):
            await telegram.send_telegram_to(text, link["tg_chat_id"])
            sent += 1
    return sent


async def _send_digest_for_link(link: dict, now_utc: datetime) -> None:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç.
    """
    if link.get("muted"):
        return

    pool = await get_pool()
    async with pool.acquire() as conn:
        rems = await conn.fetch("""
            SELECT avito_chat_id, first_ts
            FROM notify.reminders
            WHERE account_id = $1
            ORDER BY first_ts
        """, link["account_id"])
        if not rems:
            return

        account = await conn.fetchrow(
            "SELECT name, avito_user_id FROM notify.accounts WHERE id = $1",
            link["account_id"]
        )

    title = account["name"] or str(account["avito_user_id"])
    lines = [f"üóûÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É {title} ({now_utc.date().isoformat()})"]
    for r in rems:
        minutes = int((now_utc - r["first_ts"]).total_seconds() // 60)
        lines.append(f"‚Ä¢ –ß–∞—Ç #{r['avito_chat_id']}: {minutes} –º–∏–Ω –±–µ–∑ –æ—Ç–≤–µ—Ç–∞")
    await telegram.send_telegram_to("\n".join(lines), link["tg_chat_id"])


async def morning_digest_tick() -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É –∫–∞–∫–∏—Ö —Å–≤—è–∑–æ–∫ ¬´–Ω–∞—Å—Ç—É–ø–∏–ª–∞¬ª –∏—Ö daily_digest_time –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π TZ, –∏ —à–ª—ë—Ç –¥–∞–π–¥–∂–µ—Å—Ç.
    """
    now_utc = datetime.now(timezone.utc)
    async with (await get_pool()).acquire() as conn:
        links = await conn.fetch("""
            SELECT l.account_id, ch.tg_chat_id, l.daily_digest_time, l.tz, l.muted
            FROM notify.account_chat_links l
            JOIN notify.telegram_chats ch ON ch.id = l.chat_id
            WHERE l.daily_digest_time IS NOT NULL
        """)
    for l in links:
        if l["muted"]:
            continue
        tz = ZoneInfo(l["tz"] or "UTC")
        local = now_utc.astimezone(tz).timetz().replace(second=0, microsecond=0)
        if local == l["daily_digest_time"]:
            await _send_digest_for_link(dict(l), now_utc)