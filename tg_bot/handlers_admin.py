"""
–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –ª–∏—á–∫–µ: /help, /howto, /avito_link, /delete_account.
"""
from __future__ import annotations
import asyncio
import logging
import re
from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

from db import get_pool
import auth

from .common import is_admin_message
from .texts import HELP_TEXT_ADMIN_PRIVATE, HELP_TEXT_GROUP_PUBLIC, HOWTO_TEXT

log = logging.getLogger("AvitoNotify.aiogram.admin")
router = Router()


@router.message(F.chat.type == "private", Command( "help", ignore_mention=True))
async def cmd_help_private(message: Message):
    """
    –í –õ–°: –∞–¥–º–∏–Ω—É ‚Äî –ø–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫, –æ—Å—Ç–∞–ª—å–Ω—ã–º ‚Äî –ø—É–±–ª–∏—á–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞.
    """
    if is_admin_message(message):
        return await message.answer(HELP_TEXT_ADMIN_PRIVATE)
    return await message.answer(HELP_TEXT_GROUP_PUBLIC)


@router.message(Command("howto"))
async def cmd_howto(message: Message):
    """
    –ö–æ—Ä–æ—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é Avito.
    """
    if message.chat.type != "private":
        return
    if not is_admin_message(message):
        return
    await message.answer(HOWTO_TEXT)


@router.message(Command("avito_link"))
async def cmd_avito_link(message: Message):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç OAuth-—Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ Avito-–∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    if message.chat.type != "private":
        return
    if not is_admin_message(message):
        return
    url = auth.build_authorize_url()
    await message.answer(f"–°—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Avito:\n{url}")


@router.message(Command("delete_account"))
async def cmd_delete_account(message: Message, command: CommandObject):
    """
    –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ë–î+—Å–≤—è–∑–∏+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è+—Ç–æ–∫–µ–Ω—ã).
    –§–æ—Ä–º–∞—Ç: /delete_account <avito_user_id>
    """
    if message.chat.type != "private":
        return
    if not is_admin_message(message):
        return

    args = (command.args or "").strip()
    if not args or not re.fullmatch(r"\d+", args):
        return await message.answer("–§–æ—Ä–º–∞—Ç: /delete_account <avito_user_id>")

    avito_user_id = int(args)
    async with (await get_pool()).acquire() as conn:
        acc_id = await conn.fetchval(
            "SELECT id FROM notify.accounts WHERE avito_user_id=$1",
            avito_user_id,
        )
        if not acc_id:
            return await message.answer("–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º avito_user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        async with conn.transaction():
            await conn.execute("DELETE FROM notify.reminders WHERE account_id=$1", acc_id)
            await conn.execute("DELETE FROM notify.account_chat_links WHERE account_id=$1", acc_id)
            await conn.execute("DELETE FROM notify.accounts WHERE id=$1", acc_id)

    # –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ sync/async —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π)
    if hasattr(auth, "delete_tokens_for_user"):
        try:
            func = auth.delete_tokens_for_user  # type: ignore[attr-defined]
            if asyncio.iscoroutinefunction(func):
                await func(avito_user_id)  # type: ignore[misc]
            else:
                func(avito_user_id)  # type: ignore[misc,call-arg]
        except Exception as e:
            log.warning("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", avito_user_id, e)

    await message.answer("üóë –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω, —Å–≤—è–∑–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.")


@router.message(Command("summary"))
async def cmd_summary(message: Message):
    # –æ–¥–∏–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –≤ –õ–°
    if message.chat.type != "private" or not is_admin_message(message):
        return

    async with (await get_pool()).acquire() as conn:
        accounts = await conn.fetch(
            "SELECT avito_user_id, COALESCE(display_name, name, '') AS name "
            "FROM notify.accounts ORDER BY avito_user_id"
        )
        chats = await conn.fetch(
            "SELECT COALESCE(title,'') AS title, tg_chat_id "
            "FROM notify.telegram_chats ORDER BY id"
        )
        links = await conn.fetch(
            """
            SELECT
                a.avito_user_id,
                COALESCE(a.display_name, a.name, '') AS acc_name,
                COALESCE(c.title,'') AS chat_title,
                l.muted,
                l.work_from,
                l.work_to,
                l.tz,
                l.daily_digest_time
            FROM notify.account_chat_links l
            JOIN notify.accounts a ON a.id = l.account_id
            JOIN notify.telegram_chats c ON c.id = l.chat_id
            ORDER BY a.avito_user_id, c.id
            """
        )

    def fmt_hours(start, end, tz):
        if start and end and start.hour == end.hour and start.minute == end.minute:
            return f"24/7" + (f" ({tz})" if tz else "")
        if start and end:
            s = f"{start:%H:%M}‚Äì{end:%H:%M}"
            return s + (f" ({tz})" if tz else "")
        return "–Ω–µ—Ç"

    def fmt_time(val):
        return f"{val:%H:%M}" if val else "–Ω–µ—Ç"

    parts = []
    parts.append("üìä –°–≤–æ–¥–∫–∞")

    # –ê–∫–∫–∞—É–Ω—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ user id –∏ –∏–º—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    parts.append("\n\nüë§ –ê–∫–∫–∞—É–Ω—Ç—ã:")
    if accounts:
        for a in accounts:
            parts.append(f"‚Ä¢ {a['avito_user_id']}" + (f" ‚Äî {a['name']}" if a['name'] else ""))
    else:
        parts.append("‚Ä¢ –Ω–µ—Ç")

    # –ß–∞—Ç—ã ‚Äî –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö id –∏ —Ç–∏–ø–æ–≤
    parts.append("\n\nüí¨ –ß–∞—Ç—ã:")
    if chats:
        for c in chats:
            title = c["title"] or str(c["tg_chat_id"])
            parts.append(f"‚Ä¢ {title}")
    else:
        parts.append("‚Ä¢ –Ω–µ—Ç")

    # –ü—Ä–∏–≤—è–∑–∫–∏ ‚Äî ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏¬ª
    parts.append("\n\nüîó –ü—Ä–∏–≤—è–∑–∫–∏:")
    if links:
        for l in links:
            acc_label = (f"{l['acc_name']} " if l["acc_name"] else "") + f"({l['avito_user_id']})"
            chat_title = l["chat_title"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            parts.append(f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç {acc_label} –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —á–∞—Ç—É ¬´{chat_title}¬ª")
            parts.append(f"   ‚ñ∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if not l['muted'] else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")
            parts.append(f"   ‚ñ∏ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {fmt_hours(l['work_from'], l['work_to'], l['tz'])}")
            parts.append(f"   ‚ñ∏ –£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: {fmt_time(l['daily_digest_time'])}")
            parts.append("")
    else:
        parts.append("‚Ä¢ –Ω–µ—Ç")

    text = "\n".join(parts).rstrip()
    for i in range(0, len(text), 3500):
        await message.answer(text[i:i + 3500])


@router.message(Command("set_name"))
async def cmd_set_name(message: Message):
    if message.chat.type != "private" or not is_admin_message(message):
        return
    args = (message.text or "").split(maxsplit=2)
    # –æ–∂–∏–¥–∞–µ–º: /set_name <id> <–∏–º—è>
    if len(args) < 3 or not args[1].isdigit():
        return await message.answer("–§–æ—Ä–º–∞—Ç: /set_name <avito_user_id> <–Ω–æ–≤–æ–µ –∏–º—è>")
    avito_user_id = int(args[1])
    new_name = args[2].strip()
    if not new_name:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.")
    async with (await get_pool()).acquire() as conn:
        updated = await conn.execute(
            "UPDATE notify.accounts SET display_name=$2 WHERE avito_user_id=$1",
            avito_user_id, new_name
        )
    await message.answer(f"‚úÖ –ò–º—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {avito_user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_name}")


@router.message(Command("clear_reminders"))
async def cmd_clear_reminders(message: Message):
    """
    –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ avito_user_id.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É –≤ –õ–°: /clear_reminders <avito_user_id>
    """
    if message.chat.type != "private":
        return
    if not is_admin_message(message):
        return

    args = (message.text or "").split(maxsplit=1)
    if len(args) < 2 or not args[1].strip().isdigit():
        return await message.answer("–§–æ—Ä–º–∞—Ç: /clear_reminders <avito_user_id>")

    avito_user_id = int(args[1].strip())
    async with (await get_pool()).acquire() as conn:
        status = await conn.execute(
            """
            DELETE FROM notify.reminders r
            USING notify.accounts a
            WHERE a.id = r.account_id
              AND a.avito_user_id = $1
            """,
            avito_user_id,
        )

    deleted = 0
    if isinstance(status, str) and status.startswith("DELETE"):
        try:
            deleted = int(status.split()[-1])
        except Exception:
            deleted = 0

    if deleted == 0:
        return await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {avito_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return await message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {deleted} (–∞–∫–∫–∞—É–Ω—Ç {avito_user_id}).")


@router.message(Command("cleanup_now"))
async def cmd_cleanup_now(message: Message):
    if not is_admin_message(message):
        return
    from notifications import cleanup_all_chats
    n = await cleanup_all_chats()
    await message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {n}")