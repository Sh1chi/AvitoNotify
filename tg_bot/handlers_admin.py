"""
–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –ª–∏—á–∫–µ: /help, /howto, /avito_link, /delete_account.
"""
from __future__ import annotations
import asyncio
import logging
import re
from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

from db import get_pool
import auth

from .common import is_admin_message
from .texts import HELP_TEXT_ADMIN_PRIVATE, HELP_TEXT_GROUP_PUBLIC, HOWTO_TEXT

log = logging.getLogger("AvitoNotify.aiogram.admin")
router = Router()



@router.message(F.chat.type == "private", Command("start", "help", ignore_mention=True))
async def cmd_help_private(message: Message):
    """
    –í –õ–°: –∞–¥–º–∏–Ω—É ‚Äî –ø–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫, –æ—Å—Ç–∞–ª—å–Ω—ã–º ‚Äî –ø—É–±–ª–∏—á–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞.
    """
    if is_admin_message(message):
        return await message.answer(HELP_TEXT_ADMIN_PRIVATE)
    return await message.answer(HELP_TEXT_GROUP_PUBLIC)


@router.message(Command("howto"))
async def cmd_howto(message: Message):
    """
    –ö–æ—Ä–æ—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é Avito.
    """
    if message.chat.type != "private":
        return
    if not is_admin_message(message):
        return
    await message.answer(HOWTO_TEXT)


@router.message(Command("avito_link"))
async def cmd_avito_link(message: Message):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç OAuth-—Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ Avito-–∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    if message.chat.type != "private":
        return
    if not is_admin_message(message):
        return
    url = auth.build_authorize_url()
    await message.answer(f"–°—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Avito:\n{url}")


@router.message(Command("delete_account"))
async def cmd_delete_account(message: Message, command: CommandObject):
    """
    –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ë–î+—Å–≤—è–∑–∏+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è+—Ç–æ–∫–µ–Ω—ã).
    –§–æ—Ä–º–∞—Ç: /delete_account <avito_user_id>
    """
    if message.chat.type != "private":
        return
    if not is_admin_message(message):
        return

    args = (command.args or "").strip()
    if not args or not re.fullmatch(r"\d+", args):
        return await message.answer("–§–æ—Ä–º–∞—Ç: /delete_account <avito_user_id>")

    avito_user_id = int(args)
    async with (await get_pool()).acquire() as conn:
        acc_id = await conn.fetchval(
            "SELECT id FROM notify.accounts WHERE avito_user_id=$1",
            avito_user_id,
        )
        if not acc_id:
            return await message.answer("–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º avito_user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        async with conn.transaction():
            await conn.execute("DELETE FROM notify.reminders WHERE account_id=$1", acc_id)
            await conn.execute("DELETE FROM notify.account_chat_links WHERE account_id=$1", acc_id)
            await conn.execute("DELETE FROM notify.accounts WHERE id=$1", acc_id)

    # –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ sync/async —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π)
    if hasattr(auth, "delete_tokens_for_user"):
        try:
            func = auth.delete_tokens_for_user  # type: ignore[attr-defined]
            if asyncio.iscoroutinefunction(func):
                await func(avito_user_id)  # type: ignore[misc]
            else:
                func(avito_user_id)  # type: ignore[misc,call-arg]
        except Exception as e:
            log.warning("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", avito_user_id, e)

    await message.answer("üóë –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω, —Å–≤—è–∑–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.")
