"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø: /help, /link, /unlink, /mute, /hours, /digest.
"""
from __future__ import annotations
import logging
import re
from datetime import time as dtime
from aiogram import Router, Bot, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, ChatMemberUpdated
from aiogram.enums import ChatMemberStatus


from .common import (
    upsert_chat_and_get_id,
    account_id_by_avito,
    ensure_link,
    update_links_for_chat,
    parse_hours,
)
from .texts import HELP_TEXT_GROUP_ADMIN

log = logging.getLogger("AvitoNotify.aiogram.group")
router = Router()


async def is_chat_admin(message: Message) -> bool:
    member = await message.chat.get_member(message.from_user.id)
    return member.status in (ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR)


@router.message(F.chat.type.in_({"group", "supergroup"}), Command( "help", ignore_mention=True))
async def cmd_help_group(message: Message):
    """
    –í –≥—Ä—É–ø–ø–µ: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä, –æ—Å—Ç–∞–ª—å–Ω—ã–º ‚Äî –ø—É–±–ª–∏—á–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞.
    """
    if await is_chat_admin(message):
        return await message.answer(HELP_TEXT_GROUP_ADMIN)
    return await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")


@router.message(Command("link"))
async def cmd_link(message: Message, command: CommandObject):
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Avito-–∞–∫–∫–∞—É–Ω—Ç—É.
    –§–æ—Ä–º–∞—Ç: /link <avito_user_id>
    """
    if message.chat.type not in ("group", "supergroup"):
        return
    if not await is_chat_admin(message):
        return await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
    arg = (command.args or "").strip()
    if not arg or not re.fullmatch(r"\d+", arg):
        return await message.answer("–§–æ—Ä–º–∞—Ç: /link <avito_user_id>")

    avito_user_id = int(arg)
    chat_db_id = await upsert_chat_and_get_id(message.chat)
    acc_id = await account_id_by_avito(avito_user_id)
    if not acc_id:
        return await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /avito_link –≤ –õ–° –∞–¥–º–∏–Ω–∞ (–ø—Ä–æ–π–¥–∏—Ç–µ OAuth)."
        )
    await ensure_link(acc_id, chat_db_id)

    # –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è (display_name) –≤–º–µ—Å—Ç–æ id
    from db import get_pool  # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤–≤–µ—Ä—Ö—É
    async with (await get_pool()).acquire() as conn:
        label = await conn.fetchval(
            "SELECT COALESCE(display_name, name, avito_user_id::text) FROM notify.accounts WHERE id=$1",
            acc_id,
        )
    await message.answer(f"üîó –ì—Ä—É–ø–ø–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ {label}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")


@router.message(Command("unlink"))
async def cmd_unlink(message: Message, command: CommandObject):
    """
    –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.
    –§–æ—Ä–º–∞—Ç: /unlink <avito_user_id>
    """
    if message.chat.type not in ("group", "supergroup"):
        return
    if not await is_chat_admin(message):
        return await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
    arg = (command.args or "").strip()
    if not arg or not re.fullmatch(r"\d+", arg):
        return await message.answer("–§–æ—Ä–º–∞—Ç: /unlink <avito_user_id>")

    avito_user_id = int(arg)
    acc_id = await account_id_by_avito(avito_user_id)
    if not acc_id:
        return await message.answer("–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º avito_user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
    chat_db_id = await upsert_chat_and_get_id(message.chat)
    from db import get_pool  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å –≤ –æ–±—â–∏–π –º–æ–¥—É–ª—å
    async with (await get_pool()).acquire() as conn:
        await conn.execute(
            "DELETE FROM notify.account_chat_links WHERE account_id=$1 AND chat_id=$2",
            acc_id,
            chat_db_id,
        )
    await message.answer("üîì –°–≤—è–∑—å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")


@router.message(Command("mute"))
async def cmd_mute(message: Message, command: CommandObject):
    """
    –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ.
    –§–æ—Ä–º–∞—Ç: /mute on|off
    """
    if message.chat.type not in ("group", "supergroup"):
        return
    arg = (command.args or "").strip().lower()
    if arg not in ("on", "off"):
        return await message.answer("–§–æ—Ä–º–∞—Ç: /mute on|off")
    muted = (arg == "on")
    chat_db_id = await upsert_chat_and_get_id(message.chat)
    await update_links_for_chat(chat_db_id, muted=muted)
    await message.answer("üîï –û—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è." if muted else "üîî –í–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")


@router.message(Command("hours"))
async def cmd_hours(message: Message, command: CommandObject):
    """
    –ó–∞–¥–∞—ë—Ç —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ.
    –§–æ—Ä–º–∞—Ç: /hours HH:MM-HH:MM [Europe/Moscow]
    """
    if message.chat.type not in ("group", "supergroup"):
        return
    if not await is_chat_admin(message):
        return await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
    args = (command.args or "").strip()
    if not args:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /hours HH:MM-HH:MM [Europe/Moscow]")
    try:
        start, end, tz = parse_hours(args)
    except Exception as e:
        return await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    chat_db_id = await upsert_chat_and_get_id(message.chat)
    await update_links_for_chat(chat_db_id, work_from=start, work_to=end, tz=tz)
    tz_suffix = f" {tz}" if tz else ""
    await message.answer(
        f"üïò –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {start.strftime('%H:%M')}-{end.strftime('%H:%M')}{tz_suffix}"
    )


@router.message(Command("digest"))
async def cmd_digest(message: Message, command: CommandObject):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –µ–≥–æ.
    –§–æ—Ä–º–∞—Ç: /digest HH:MM|off
    """
    if message.chat.type not in ("group", "supergroup"):
        return
    if not await is_chat_admin(message):
        return await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
    arg = (command.args or "").strip().lower()
    chat_db_id = await upsert_chat_and_get_id(message.chat)
    if arg == "off":
        await update_links_for_chat(chat_db_id, daily_digest_time=None)
        return await message.answer("üßπ –î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–∫–ª—é—á—ë–Ω.")
    m = re.match(r"^(\d{1,2}):(\d{2})$", arg or "")
    if not m:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /digest HH:MM|off")
    hh, mm = int(m[1]), int(m[2])
    if not (0 <= hh < 24 and 0 <= mm < 60):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è.")
    await update_links_for_chat(chat_db_id, daily_digest_time=dtime(hh, mm))
    await message.answer(f"üóûÔ∏è –î–∞–π–¥–∂–µ—Å—Ç –≤ {hh:02d}:{mm:02d}.")


@router.my_chat_member()
async def on_my_chat_member(update: ChatMemberUpdated, bot: Bot):
    """
    –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ:
    - –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É;
    - –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: —á–∏—Å—Ç–∏–º —Å–≤—è–∑–∏ –∏ —É–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ –ë–î.
    """
    chat = update.chat
    status = update.new_chat_member.status

    if chat.type not in ("group", "supergroup"):
        return

    # –ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ / —Å–¥–µ–ª–∞–ª–∏ –∞–¥–º–∏–Ω–æ–º
    if status in (ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR):
        await upsert_chat_and_get_id(chat)
        return await bot.send_message(chat.id, "‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /link <avito_user_id>.")

    # –ë–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏/–∫–∏–∫–Ω—É–ª–∏/–æ–Ω –≤—ã—à–µ–ª ‚Äî —á–∏—Å—Ç–∏–º –ë–î
    if status in (ChatMemberStatus.LEFT, ChatMemberStatus.KICKED):
        chat_db_id = await upsert_chat_and_get_id(chat)  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∑–Ω–∞–µ–º id
        from db import get_pool
        async with (await get_pool()).acquire() as conn:
            async with conn.transaction():
                await conn.execute(
                    "DELETE FROM notify.account_chat_links WHERE chat_id=$1",
                    chat_db_id,
                )
                await conn.execute(
                    "DELETE FROM notify.telegram_chats WHERE id=$1",
                    chat_db_id,
                )
        log.info("–£–¥–∞–ª—ë–Ω —á–∞—Ç %s –∏ –≤—Å–µ –µ–≥–æ —Å–≤—è–∑–∏ (bot removed).", chat.id)
