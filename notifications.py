from __future__ import annotations
from typing import Optional
from db import get_pool
import telegram
import config

async def send_and_log(text: str, tg_chat_id: int) -> Optional[int]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç (tg_chat_id, message_id)
    –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏.
    """
    msg = await telegram.send_telegram_to(text, tg_chat_id)

    # msg ‚Äî —ç—Ç–æ dict –∏–∑ Telegram "result"
    message_id = None
    if isinstance(msg, dict):
        message_id = msg.get("message_id")
    else:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–º —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å
        message_id = getattr(msg, "message_id", None)

    if message_id is None:
        return None

    async with (await get_pool()).acquire() as conn:
        await conn.execute(
            "INSERT INTO notify.sent_messages (tg_chat_id, tg_message_id) VALUES ($1, $2)",
            int(tg_chat_id), int(message_id),
        )
    return int(message_id)

async def cleanup_all_chats() -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –µ—â—ë –Ω–µ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ —É–¥–∞–ª—ë–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö —É–¥–∞–ª—ë–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å–µ–π.
    """
    pool = await get_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT id, tg_chat_id, tg_message_id FROM notify.sent_messages WHERE deleted_ts IS NULL"
        )
        ids: list[int] = []
        for r in rows:
            try:
                await telegram.delete_message(int(r["tg_chat_id"]), int(r["tg_message_id"]))
            except Exception:
                pass
            ids.append(int(r["id"]))
        if ids:
            await conn.execute(
                "UPDATE notify.sent_messages SET deleted_ts = now() WHERE id = ANY($1::bigint[])",
                ids,
            )

        # üîª –•–ê–†–î-–£–î–ê–õ–ï–ù–ò–ï —Å—Ç–∞—Ä—ã—Ö ¬´–º—è–≥–∫–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö¬ª (—Ä–µ—Ç–µ–Ω—Ü–∏—è)
        await conn.execute("""
                DELETE FROM notify.sent_messages
                WHERE deleted_ts IS NOT NULL
                  AND deleted_ts < now() - make_interval(days => $1)
            """, config.SENT_MESSAGES_RETENTION_DAYS)

        return len(ids)

async def cleanup_by_tg_chat(tg_chat_id: int) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –µ—â—ë –Ω–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º tg-—á–∞—Ç–µ.
    """
    pool = await get_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT id, tg_chat_id, tg_message_id
            FROM notify.sent_messages
            WHERE deleted_ts IS NULL AND tg_chat_id = $1
            """,
            int(tg_chat_id),
        )
        ids: list[int] = []
        for r in rows:
            try:
                await telegram.delete_message(int(r["tg_chat_id"]), int(r["tg_message_id"]))
            except Exception:
                pass
            ids.append(int(r["id"]))
        if ids:
            await conn.execute(
                "UPDATE notify.sent_messages SET deleted_ts = now() WHERE id = ANY($1::bigint[])",
                ids,
            )
        return len(ids)
