"""
–ü—Ä–∏—ë–º Avito-webhook‚Äô–æ–≤ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""
import base64, hashlib, hmac, logging
from datetime import datetime, timezone
from fastapi import APIRouter, HTTPException, Request

import config, telegram
from db import get_pool
from reminders import REMINDERS

router = APIRouter()
log = logging.getLogger("avito_bridge.webhook")


def _verify_signature(body: bytes, signature: str, secret: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å HMAC-SHA256 –ø–æ–¥–ø–∏—Å–∏ –æ—Ç Avito webhook.
    """
    calc = hmac.new(secret.encode(), body, hashlib.sha256).digest()
    return hmac.compare_digest(base64.b64encode(calc).decode(), signature)


async def _ensure_account(avito_user_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç internal `account_id`, —Å–æ–∑–¥–∞–≤–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–µ–±-—Ö—É–∫–µ.
    """
    pool = await get_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow(
            "INSERT INTO accounts (avito_user_id) VALUES ($1) "
            "ON CONFLICT (avito_user_id) DO UPDATE SET avito_user_id = EXCLUDED.avito_user_id "
            "RETURNING id",
            avito_user_id,
        )
    return row["id"]


@router.post("/avito/webhook")
async def avito_webhook(request: Request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π webhook –æ—Ç Avito:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å;
    - –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–ø—Ä–æ–¥–∞–≤–µ—Ü –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç);
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram;
    - –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.
    """
    raw = await request.body()
    if not _verify_signature(
        raw, request.headers.get("X-Hook-Signature", ""), config.AVITO_HOOK_SECRET
    ):
        raise HTTPException(401, "Bad signature")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    event   = await request.json()
    value   = event.get("payload", {}).get("value", {})
    chat_id = int(value.get("chat_id", 0))
    author  = int(value.get("author_id", 0))  # –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
    seller  = int(value.get("user_id", 0))    # –≤–ª–∞–¥–µ–ª–µ—Ü webhook'–∞
    text    = value.get("content", {}).get("text", "[–ø—É—Å—Ç–æ]")

    # –ß–∏—Ç–∞–µ–º—ã–π timestamp
    ts_str = datetime.fromtimestamp(event["timestamp"], tz=timezone.utc)\
                 .strftime("%Y-%m-%d %H:%M:%S UTC")

    account_id = await _ensure_account(seller)
    pool = await get_pool()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–≤–µ—Ç–∏–ª ‚Üí —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if author == seller:
        async with pool.acquire() as conn:
            await conn.execute(
                "DELETE FROM reminders WHERE account_id=$1 AND chat_id=$2",
                account_id,
                chat_id,
            )
        return {"ok": True}

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª ‚Üí —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ —Å—Ç–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ
    msg = (
        "üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Avito*\n"
        f"–ê–∫–∫–∞—É–Ω—Ç: {seller}\n"
        f"–ß–∞—Ç #{chat_id}\n"
        f"–¢–µ–∫—Å—Ç: {text}\n"
        f"–í—Ä–µ–º—è: {ts_str}"
    )
    await telegram.send_telegram(msg)

    async with pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO reminders (account_id, chat_id, first_ts)
            VALUES ($1, $2, now())
            ON CONFLICT (account_id, chat_id) DO NOTHING
            """,
            account_id,
            chat_id,
        )
    return {"ok": True}
