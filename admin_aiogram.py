"""
Aiogram-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Avito –∫ Telegram-–≥—Ä—É–ø–ø–∞–º.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î.
"""
from __future__ import annotations
import asyncio, logging, re
from datetime import time as dtime
from typing import Optional

from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, ChatMemberUpdated
from aiogram.filters import Command, CommandObject

import config
from db import get_pool

log = logging.getLogger("AvitoNotify.aiogram")

router = Router()
_bot_db_id: int | None = None


# –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
HELP_TEXT = (
    "üëã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "‚Ä¢ /add_avito <avito_user_id> [name]\n"
    "‚Ä¢ (–≤ –≥—Ä—É–ø–ø–µ) /link <avito_user_id>\n"
    "‚Ä¢ (–≤ –≥—Ä—É–ø–ø–µ) /mute on|off\n"
    "‚Ä¢ (–≤ –≥—Ä—É–ø–ø–µ) /hours HH:MM-HH:MM [Europe/Moscow]\n"
    "‚Ä¢ (–≤ –≥—Ä—É–ø–ø–µ) /digest HH:MM|off\n"
)


async def _ensure_bot_record(bot: Bot) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –±–æ—Ç–∞ –≤ notify.telegram_bots.
    –•—Ä–∞–Ω–∏—Ç db_id –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–≤—è–∑–æ–∫.
    """
    global _bot_db_id
    me = await bot.get_me()
    tg_bot_id = int(me.id)
    username = me.username
    async with (await get_pool()).acquire() as conn:
        await conn.execute("""
            INSERT INTO notify.telegram_bots (tg_bot_id, username, is_active)
            VALUES ($1, $2, TRUE)
            ON CONFLICT (tg_bot_id) DO UPDATE
            SET username = EXCLUDED.username, is_active = TRUE;
        """, tg_bot_id, username)
        _bot_db_id = await conn.fetchval(
            "SELECT id FROM notify.telegram_bots WHERE tg_bot_id = $1",
            tg_bot_id
        )
    log.info("Bot @%s (tg_bot_id=%s) db_id=%s", username, tg_bot_id, _bot_db_id)


async def _upsert_chat(chat) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ notify.telegram_chats.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id —á–∞—Ç–∞.
    """
    tg_chat_id = int(chat.id)
    ctype = chat.type  # "group"/"supergroup"/"private"/"channel"
    title = getattr(chat, "title", None) or getattr(chat, "username", None) or str(tg_chat_id)
    async with (await get_pool()).acquire() as conn:
        await conn.execute("""
            INSERT INTO notify.telegram_chats (tg_chat_id, type, title)
            VALUES ($1, $2, $3)
            ON CONFLICT (tg_chat_id) DO UPDATE
            SET type = EXCLUDED.type, title = EXCLUDED.title;
        """, tg_chat_id, ctype, title)
        chat_db_id = await conn.fetchval(
            "SELECT id FROM notify.telegram_chats WHERE tg_chat_id = $1",
            tg_chat_id
        )
    return int(chat_db_id)


async def _ensure_account(avito_user_id: int, name: Optional[str]) -> int:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∞–∫–∫–∞—É–Ω—Ç–∞ Avito –≤ notify.accounts.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id –∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    async with (await get_pool()).acquire() as conn:
        await conn.execute("""
            INSERT INTO notify.accounts (avito_user_id, name)
            VALUES ($1, $2)
            ON CONFLICT (avito_user_id) DO UPDATE
            SET name = COALESCE(EXCLUDED.name, notify.accounts.name);
        """, avito_user_id, name)
        acc_id = await conn.fetchval(
            "SELECT id FROM notify.accounts WHERE avito_user_id = $1",
            avito_user_id
        )
    return int(acc_id)


async def _account_id_by_avito(avito_user_id: int) -> int | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ avito_user_id –∏–ª–∏ None."""
    async with (await get_pool()).acquire() as conn:
        return await conn.fetchval("SELECT id FROM notify.accounts WHERE avito_user_id = $1", avito_user_id)


async def _ensure_link(account_id: int, chat_db_id: int) -> None:
    """–°–æ–∑–¥–∞—ë—Ç —Å–≤—è–∑—å –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —á–∞—Ç–æ–º, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç."""
    async with (await get_pool()).acquire() as conn:
        await conn.execute("""
            INSERT INTO notify.account_chat_links (account_id, chat_id, bot_id, muted)
            VALUES ($1, $2, $3, FALSE)
            ON CONFLICT (account_id, chat_id) DO NOTHING;
        """, account_id, chat_db_id, _bot_db_id)


async def _update_links_for_chat(chat_db_id: int, **kwargs) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö —Å–≤—è–∑–µ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º.
    –ù–∞–ø—Ä–∏–º–µ—Ä: mute, —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã, –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.
    """
    if not kwargs: return
    sets, vals = [], []
    for i, (k, v) in enumerate(kwargs.items(), start=1):
        sets.append(f"{k} = ${i}")
        vals.append(v)
    vals.append(chat_db_id)
    sql = f"UPDATE notify.account_chat_links SET {', '.join(sets)} WHERE chat_id = ${len(vals)}"
    async with (await get_pool()).acquire() as conn:
        await conn.execute(sql, *vals)


def _is_admin(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ñ–∏–≥–µ."""
    user_id = int(message.from_user.id) if message.from_user else 0
    return user_id == int(config.TELEGRAM_ADMIN_USER_ID or 0)


def _parse_hours(s: str) -> tuple[dtime, dtime, Optional[str]]:
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ 'HH:MM-HH:MM [Europe/Moscow]' –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –∏ —Ç–∞–π–º–∑–æ–Ω—É."""
    m = re.match(r"^(\d{1,2}):(\d{2})-(\d{1,2}):(\d{2})(?:\s+([\w/\-]+))?$", s or "")
    if not m:
        raise ValueError("–§–æ—Ä–º–∞—Ç: HH:MM-HH:MM [Europe/Moscow]")
    h1,m1,h2,m2,tz = int(m[1]),int(m[2]),int(m[3]),int(m[4]),m[5]
    if not (0<=h1<24 and 0<=h2<24 and 0<=m1<60 and 0<=m2<60):
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
    return dtime(h1,m1), dtime(h2,m2), tz

# --- Handlers ---

@router.message(Command("start", "help"))
async def cmd_help(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (HELP_TEXT) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.
    """
    if message.chat.type != "private":
        return
    if not _is_admin(message):
        return
    await message.answer(HELP_TEXT)


@router.message(Command("add_avito"))
async def cmd_add_avito(message: Message, command: CommandObject):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π Avito-–∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î.
    –§–æ—Ä–º–∞—Ç: /add_avito <avito_user_id> [name]
    """
    if message.chat.type != "private":
        return await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ª–∏—á–∫—É –±–æ—Ç—É.")
    if not _is_admin(message):
        return
    args = (command.args or "").strip().split()
    if not args:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /add_avito <avito_user_id> [name]")
    try:
        avito_user_id = int(args[0])
    except ValueError:
        return await message.answer("avito_user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    name = " ".join(args[1:]) if len(args) > 1 else None
    acc_id = await _ensure_account(avito_user_id, name)
    await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω (id={acc_id}, avito_user_id={avito_user_id}).")


@router.message(Command("link"))
async def cmd_link(message: Message, command: CommandObject):
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram-–≥—Ä—É–ø–ø—É –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Avito-–∞–∫–∫–∞—É–Ω—Ç—É.
    –§–æ—Ä–º–∞—Ç: /link <avito_user_id>
    """
    if message.chat.type not in ("group", "supergroup"):
        return await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ *–≥—Ä—É–ø–ø–µ*.")
    if not _is_admin(message):
        return
    args = (command.args or "").strip().split()
    if not args:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /link <avito_user_id>")
    try:
        avito_user_id = int(args[0])
    except ValueError:
        return await message.answer("avito_user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    chat_db_id = await _upsert_chat(message.chat)
    acc_id = await _account_id_by_avito(avito_user_id)
    if not acc_id:
        return await message.answer(f"–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç: /add_avito {avito_user_id}")
    await _ensure_link(acc_id, chat_db_id)
    await message.answer(f"üîó –ì—Ä—É–ø–ø–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ {avito_user_id}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")


@router.message(Command("mute"))
async def cmd_mute(message: Message, command: CommandObject):
    """
    –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ.
    –§–æ—Ä–º–∞—Ç: /mute on|off
    """
    if message.chat.type not in ("group", "supergroup"):
        return
    if not _is_admin(message):
        return
    arg = (command.args or "").strip().lower()
    if arg not in ("on", "off"):
        return await message.answer("–§–æ—Ä–º–∞—Ç: /mute on|off")
    muted = (arg == "on")
    chat_db_id = await _upsert_chat(message.chat)
    await _update_links_for_chat(chat_db_id, muted=muted)
    await message.answer("üîï –û—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è." if muted else "üîî –í–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")


@router.message(Command("hours"))
async def cmd_hours(message: Message, command: CommandObject):
    """
    –ó–∞–¥–∞—ë—Ç —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ.
    –§–æ—Ä–º–∞—Ç: /hours HH:MM-HH:MM [Europe/Moscow]
    """
    if message.chat.type not in ("group", "supergroup"):
        return
    if not _is_admin(message):
        return
    args = (command.args or "").strip()
    if not args:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /hours HH:MM-HH:MM [Europe/Moscow]")
    try:
        start, end, tz = _parse_hours(args)
    except Exception as e:
        return await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    chat_db_id = await _upsert_chat(message.chat)
    await _update_links_for_chat(chat_db_id, work_from=start, work_to=end, tz=tz)
    await message.answer(f"üïò –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {start.strftime('%H:%M')}-{end.strftime('%H:%M')} {tz or ''}".strip())


@router.message(Command("digest"))
async def cmd_digest(message: Message, command: CommandObject):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –µ–≥–æ.
    –§–æ—Ä–º–∞—Ç: /digest HH:MM|off
    """
    if message.chat.type not in ("group", "supergroup"):
        return
    if not _is_admin(message):
        return
    arg = (command.args or "").strip().lower()
    chat_db_id = await _upsert_chat(message.chat)
    if arg == "off":
        await _update_links_for_chat(chat_db_id, daily_digest_time=None)
        return await message.answer("üßπ –î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–∫–ª—é—á—ë–Ω.")
    m = re.match(r"^(\d{1,2}):(\d{2})$", arg or "")
    if not m:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /digest HH:MM|off")
    hh, mm = int(m[1]), int(m[2])
    if not (0 <= hh < 24 and 0 <= mm < 60):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è.")
    await _update_links_for_chat(chat_db_id, daily_digest_time=dtime(hh, mm))
    await message.answer(f"üóûÔ∏è –î–∞–π–¥–∂–µ—Å—Ç –≤ {hh:02d}:{mm:02d}.")


# –ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏/—Ä–∞–∑—Ä–µ—à–∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ
@router.my_chat_member()
async def on_my_chat_member(update: ChatMemberUpdated, bot: Bot):
    """
    –†–µ–∞–∫—Ü–∏—è –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É:
    - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç –≤ –ë–î
    - –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤—è–∑–∞—Ç—å Avito-–∞–∫–∫–∞—É–Ω—Ç
    """
    chat = update.chat
    status = update.new_chat_member.status
    if chat.type in ("group", "supergroup") and status in ("member", "administrator"):
        await _upsert_chat(chat)
        await bot.send_message(chat.id, "‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /link <avito_user_id>.")


# --- –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
def install(app) -> None:
    """
    –í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç aiogram-–±–æ—Ç–∞ –≤ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç polling –≤ —Ñ–æ–Ω–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    """–ó–∞–ø—É—Å–∫ aiogram poller-–∞ –∫–∞–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ FastAPI."""
    dp = Dispatcher()
    dp.include_router(router)

    @app.on_event("startup")
    async def _start():  # –æ—Ç–∫—Ä—ã—Ç—å –ø—É–ª –ë–î
        bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
        await _ensure_bot_record(bot)
        loop = asyncio.get_event_loop()
        app.state.aiogram_task = loop.create_task(dp.start_polling(bot))
        log.info("aiogram polling started")

    @app.on_event("shutdown")
    async def _stop():
        task = getattr(app.state, "aiogram_task", None)
        if task:
            task.cancel()
